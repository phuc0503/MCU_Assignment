
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002b3c  08002b3c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b3c  08002b3c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000028  08002b6c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002b6c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008aae  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a71  00000000  00000000  00028aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017020  00000000  00000000  0002b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6ce  00000000  00000000  00042920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842af  00000000  00000000  0004dfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d229d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002884  00000000  00000000  000d22f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b04 	.word	0x08002b04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002b04 	.word	0x08002b04

0800014c <isButtonPressed>:

int flagForButtons[NUMBER_OF_BUTTONS];
int flagForButtonsLongPressed[NUMBER_OF_BUTTONS];
int timerForKeyPress[NUMBER_OF_BUTTONS] = {300, 300, 300, 300};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(index > NUMBER_OF_BUTTONS){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b04      	cmp	r3, #4
 8000158:	dd01      	ble.n	800015e <isButtonPressed+0x12>
		return 0;
 800015a:	2300      	movs	r3, #0
 800015c:	e00d      	b.n	800017a <isButtonPressed+0x2e>
	}
	if(flagForButtons[index] == 1){
 800015e:	4a09      	ldr	r2, [pc, #36]	; (8000184 <isButtonPressed+0x38>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d106      	bne.n	8000178 <isButtonPressed+0x2c>
		flagForButtons[index] = 0;
 800016a:	4a06      	ldr	r2, [pc, #24]	; (8000184 <isButtonPressed+0x38>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2100      	movs	r1, #0
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <isButtonPressed+0x2e>
	}
	return 0;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000084 	.word	0x20000084

08000188 <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_OF_BUTTONS; i++){
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e0a9      	b.n	80002e8 <getKeyInput+0x160>
		KeyBuffer1[i] = KeyBuffer2[i];
 8000194:	4a59      	ldr	r2, [pc, #356]	; (80002fc <getKeyInput+0x174>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	4958      	ldr	r1, [pc, #352]	; (8000300 <getKeyInput+0x178>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyBuffer2[i] = KeyBuffer3[i];
 80001a4:	4a57      	ldr	r2, [pc, #348]	; (8000304 <getKeyInput+0x17c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	4953      	ldr	r1, [pc, #332]	; (80002fc <getKeyInput+0x174>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i){
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b03      	cmp	r3, #3
 80001b8:	d836      	bhi.n	8000228 <getKeyInput+0xa0>
 80001ba:	a201      	add	r2, pc, #4	; (adr r2, 80001c0 <getKeyInput+0x38>)
 80001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c0:	080001d1 	.word	0x080001d1
 80001c4:	080001e7 	.word	0x080001e7
 80001c8:	080001fd 	.word	0x080001fd
 80001cc:	08000213 	.word	0x08000213
		//Pedestrian button
		case 0:
			KeyBuffer3[i] = HAL_GPIO_ReadPin(B0_GPIO_Port,	B0_Pin);
 80001d0:	2101      	movs	r1, #1
 80001d2:	484d      	ldr	r0, [pc, #308]	; (8000308 <getKeyInput+0x180>)
 80001d4:	f001 f8f4 	bl	80013c0 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a49      	ldr	r2, [pc, #292]	; (8000304 <getKeyInput+0x17c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001e4:	e021      	b.n	800022a <getKeyInput+0xa2>
		//Button 1
		case 1:
			KeyBuffer3[i] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001e6:	2102      	movs	r1, #2
 80001e8:	4847      	ldr	r0, [pc, #284]	; (8000308 <getKeyInput+0x180>)
 80001ea:	f001 f8e9 	bl	80013c0 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a44      	ldr	r2, [pc, #272]	; (8000304 <getKeyInput+0x17c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001fa:	e016      	b.n	800022a <getKeyInput+0xa2>
		//Button 2
		case 2:
			KeyBuffer3[i] = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 80001fc:	2110      	movs	r1, #16
 80001fe:	4842      	ldr	r0, [pc, #264]	; (8000308 <getKeyInput+0x180>)
 8000200:	f001 f8de 	bl	80013c0 <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	4a3e      	ldr	r2, [pc, #248]	; (8000304 <getKeyInput+0x17c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000210:	e00b      	b.n	800022a <getKeyInput+0xa2>
		//Button 3
		case 3:
			KeyBuffer3[i] = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 8000212:	2101      	movs	r1, #1
 8000214:	483d      	ldr	r0, [pc, #244]	; (800030c <getKeyInput+0x184>)
 8000216:	f001 f8d3 	bl	80013c0 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a39      	ldr	r2, [pc, #228]	; (8000304 <getKeyInput+0x17c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000226:	e000      	b.n	800022a <getKeyInput+0xa2>
		default:
			break;
 8000228:	bf00      	nop
		}
		if((KeyBuffer1[i] == KeyBuffer2[i]) && (KeyBuffer2[i] == KeyBuffer3[i])){
 800022a:	4a35      	ldr	r2, [pc, #212]	; (8000300 <getKeyInput+0x178>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4932      	ldr	r1, [pc, #200]	; (80002fc <getKeyInput+0x174>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d151      	bne.n	80002e2 <getKeyInput+0x15a>
 800023e:	4a2f      	ldr	r2, [pc, #188]	; (80002fc <getKeyInput+0x174>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	492f      	ldr	r1, [pc, #188]	; (8000304 <getKeyInput+0x17c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024e:	429a      	cmp	r2, r3
 8000250:	d147      	bne.n	80002e2 <getKeyInput+0x15a>
			if(KeyBuffer3[i] != KeyBuffer4[i]){
 8000252:	4a2c      	ldr	r2, [pc, #176]	; (8000304 <getKeyInput+0x17c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025a:	492d      	ldr	r1, [pc, #180]	; (8000310 <getKeyInput+0x188>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000262:	429a      	cmp	r2, r3
 8000264:	d019      	beq.n	800029a <getKeyInput+0x112>
				KeyBuffer4[i] = KeyBuffer3[i];
 8000266:	4a27      	ldr	r2, [pc, #156]	; (8000304 <getKeyInput+0x17c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026e:	4928      	ldr	r1, [pc, #160]	; (8000310 <getKeyInput+0x188>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyBuffer3[i] == PRESSED_STATE){
 8000276:	4a23      	ldr	r2, [pc, #140]	; (8000304 <getKeyInput+0x17c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d12f      	bne.n	80002e2 <getKeyInput+0x15a>
					timerForKeyPress[i] = 300;
 8000282:	4a24      	ldr	r2, [pc, #144]	; (8000314 <getKeyInput+0x18c>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800028a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					flagForButtons[i] = 1;
 800028e:	4a22      	ldr	r2, [pc, #136]	; (8000318 <getKeyInput+0x190>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2101      	movs	r1, #1
 8000294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000298:	e023      	b.n	80002e2 <getKeyInput+0x15a>
				}
			}else{
				timerForKeyPress[i]--;
 800029a:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <getKeyInput+0x18c>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	491b      	ldr	r1, [pc, #108]	; (8000314 <getKeyInput+0x18c>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] == 0){
 80002ac:	4a19      	ldr	r2, [pc, #100]	; (8000314 <getKeyInput+0x18c>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d114      	bne.n	80002e2 <getKeyInput+0x15a>
					if(KeyBuffer3[i] == PRESSED_STATE){
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <getKeyInput+0x17c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d109      	bne.n	80002d8 <getKeyInput+0x150>
						flagForButtons[i] = 1;
 80002c4:	4a14      	ldr	r2, [pc, #80]	; (8000318 <getKeyInput+0x190>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2101      	movs	r1, #1
 80002ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flagForButtonsLongPressed[i] = 1;
 80002ce:	4a13      	ldr	r2, [pc, #76]	; (800031c <getKeyInput+0x194>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2101      	movs	r1, #1
 80002d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					timerForKeyPress[i] = 100;
 80002d8:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <getKeyInput+0x18c>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2164      	movs	r1, #100	; 0x64
 80002de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUMBER_OF_BUTTONS; i++){
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	f77f af52 	ble.w	8000194 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000054 	.word	0x20000054
 8000300:	20000044 	.word	0x20000044
 8000304:	20000064 	.word	0x20000064
 8000308:	40010800 	.word	0x40010800
 800030c:	40010c00 	.word	0x40010c00
 8000310:	20000074 	.word	0x20000074
 8000314:	20000000 	.word	0x20000000
 8000318:	20000084 	.word	0x20000084
 800031c:	20000094 	.word	0x20000094

08000320 <checkbutton>:
 */

#include "fsm_automatic.h"

void checkbutton()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	if(isButtonPressed(1))
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ff11 	bl	800014c <isButtonPressed>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d005      	beq.n	800033c <checkbutton+0x1c>
	{
		status = MANUAL;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <checkbutton+0x20>)
 8000332:	2206      	movs	r2, #6
 8000334:	601a      	str	r2, [r3, #0]
		status1 = MANUAL;
 8000336:	4b03      	ldr	r3, [pc, #12]	; (8000344 <checkbutton+0x24>)
 8000338:	2206      	movs	r2, #6
 800033a:	601a      	str	r2, [r3, #0]
	}
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000010 	.word	0x20000010
 8000344:	20000014 	.word	0x20000014

08000348 <fsm_automatic_run1>:

void fsm_automatic_run1(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	switch(status){
 800034c:	4b3a      	ldr	r3, [pc, #232]	; (8000438 <fsm_automatic_run1+0xf0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b01      	subs	r3, #1
 8000352:	2b05      	cmp	r3, #5
 8000354:	d86d      	bhi.n	8000432 <fsm_automatic_run1+0xea>
 8000356:	a201      	add	r2, pc, #4	; (adr r2, 800035c <fsm_automatic_run1+0x14>)
 8000358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035c:	08000375 	.word	0x08000375
 8000360:	08000385 	.word	0x08000385
 8000364:	080003c3 	.word	0x080003c3
 8000368:	080003eb 	.word	0x080003eb
 800036c:	08000433 	.word	0x08000433
 8000370:	08000413 	.word	0x08000413
	case INIT:
		status = AUTO_RED;
 8000374:	4b30      	ldr	r3, [pc, #192]	; (8000438 <fsm_automatic_run1+0xf0>)
 8000376:	2202      	movs	r2, #2
 8000378:	601a      	str	r2, [r3, #0]
		setTimer1(5000);
 800037a:	f241 3088 	movw	r0, #5000	; 0x1388
 800037e:	f000 fbb3 	bl	8000ae8 <setTimer1>
		break;
 8000382:	e056      	b.n	8000432 <fsm_automatic_run1+0xea>
	case AUTO_RED:
		if(timer1_flag == 1)
 8000384:	4b2d      	ldr	r3, [pc, #180]	; (800043c <fsm_automatic_run1+0xf4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d106      	bne.n	800039a <fsm_automatic_run1+0x52>
		{
			status = AUTO_GREEN;
 800038c:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <fsm_automatic_run1+0xf0>)
 800038e:	2204      	movs	r2, #4
 8000390:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 8000392:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000396:	f000 fba7 	bl	8000ae8 <setTimer1>
		}
		if(timer1_counter == 2000)
 800039a:	4b29      	ldr	r3, [pc, #164]	; (8000440 <fsm_automatic_run1+0xf8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003a2:	d105      	bne.n	80003b0 <fsm_automatic_run1+0x68>
		{
			setTimer3(500);
 80003a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a8:	f000 fbc6 	bl	8000b38 <setTimer3>
			buzzer();
 80003ac:	f000 f9d4 	bl	8000758 <buzzer>
		}
		setLed1(RED);
 80003b0:	2014      	movs	r0, #20
 80003b2:	f000 f8ff 	bl	80005b4 <setLed1>
		setLed_Pedes(GREEN);
 80003b6:	2016      	movs	r0, #22
 80003b8:	f000 f98e 	bl	80006d8 <setLed_Pedes>
		checkbutton();
 80003bc:	f7ff ffb0 	bl	8000320 <checkbutton>
		break;
 80003c0:	e037      	b.n	8000432 <fsm_automatic_run1+0xea>
	case AUTO_YELLOW:
		if(timer1_flag == 1)
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <fsm_automatic_run1+0xf4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d106      	bne.n	80003d8 <fsm_automatic_run1+0x90>
		{
			status = AUTO_RED;
 80003ca:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <fsm_automatic_run1+0xf0>)
 80003cc:	2202      	movs	r2, #2
 80003ce:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80003d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80003d4:	f000 fb88 	bl	8000ae8 <setTimer1>
		}
		// To Do
		setLed1(YELLOW);
 80003d8:	2015      	movs	r0, #21
 80003da:	f000 f8eb 	bl	80005b4 <setLed1>
		setLed_Pedes(RED);
 80003de:	2014      	movs	r0, #20
 80003e0:	f000 f97a 	bl	80006d8 <setLed_Pedes>
		checkbutton();
 80003e4:	f7ff ff9c 	bl	8000320 <checkbutton>
		break;
 80003e8:	e023      	b.n	8000432 <fsm_automatic_run1+0xea>
	case AUTO_GREEN:
		if(timer1_flag == 1)
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <fsm_automatic_run1+0xf4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d106      	bne.n	8000400 <fsm_automatic_run1+0xb8>
		{
			status = AUTO_YELLOW;
 80003f2:	4b11      	ldr	r3, [pc, #68]	; (8000438 <fsm_automatic_run1+0xf0>)
 80003f4:	2203      	movs	r2, #3
 80003f6:	601a      	str	r2, [r3, #0]
			setTimer1(2000);
 80003f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003fc:	f000 fb74 	bl	8000ae8 <setTimer1>
		}
		setLed1(GREEN);
 8000400:	2016      	movs	r0, #22
 8000402:	f000 f8d7 	bl	80005b4 <setLed1>
		setLed_Pedes(RED);
 8000406:	2014      	movs	r0, #20
 8000408:	f000 f966 	bl	80006d8 <setLed_Pedes>
		checkbutton();
 800040c:	f7ff ff88 	bl	8000320 <checkbutton>
		break;
 8000410:	e00f      	b.n	8000432 <fsm_automatic_run1+0xea>
	case MANUAL:
		setLed1(OFF);
 8000412:	2017      	movs	r0, #23
 8000414:	f000 f8ce 	bl	80005b4 <setLed1>
		if(isButtonPressed(1))
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff fe97 	bl	800014c <isButtonPressed>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d005      	beq.n	8000430 <fsm_automatic_run1+0xe8>
		{
			status = INIT;
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <fsm_automatic_run1+0xf0>)
 8000426:	2201      	movs	r2, #1
 8000428:	601a      	str	r2, [r3, #0]
			status1 = INIT;
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <fsm_automatic_run1+0xfc>)
 800042c:	2201      	movs	r2, #1
 800042e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000010 	.word	0x20000010
 800043c:	20000140 	.word	0x20000140
 8000440:	20000134 	.word	0x20000134
 8000444:	20000014 	.word	0x20000014

08000448 <fsm_automatic_run2>:

void fsm_automatic_run2(){
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	switch(status1){
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <fsm_automatic_run2+0xa4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	2b05      	cmp	r3, #5
 8000454:	d847      	bhi.n	80004e6 <fsm_automatic_run2+0x9e>
 8000456:	a201      	add	r2, pc, #4	; (adr r2, 800045c <fsm_automatic_run2+0x14>)
 8000458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045c:	08000475 	.word	0x08000475
 8000460:	08000485 	.word	0x08000485
 8000464:	080004a3 	.word	0x080004a3
 8000468:	080004c1 	.word	0x080004c1
 800046c:	080004e7 	.word	0x080004e7
 8000470:	080004df 	.word	0x080004df
	case INIT:
		status1 = AUTO_GREEN;
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <fsm_automatic_run2+0xa4>)
 8000476:	2204      	movs	r2, #4
 8000478:	601a      	str	r2, [r3, #0]
		setTimer2(3000);
 800047a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800047e:	f000 fb47 	bl	8000b10 <setTimer2>
		break;
 8000482:	e030      	b.n	80004e6 <fsm_automatic_run2+0x9e>
	case AUTO_RED:
		if(timer2_flag == 1)
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <fsm_automatic_run2+0xa8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d106      	bne.n	800049a <fsm_automatic_run2+0x52>
		{

			status1 = AUTO_GREEN;
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <fsm_automatic_run2+0xa4>)
 800048e:	2204      	movs	r2, #4
 8000490:	601a      	str	r2, [r3, #0]
			setTimer2(3000);
 8000492:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000496:	f000 fb3b 	bl	8000b10 <setTimer2>
		}
		setLed2(RED);
 800049a:	2014      	movs	r0, #20
 800049c:	f000 f8d6 	bl	800064c <setLed2>
		break;
 80004a0:	e021      	b.n	80004e6 <fsm_automatic_run2+0x9e>
	case AUTO_YELLOW:
		if(timer2_flag == 1)
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <fsm_automatic_run2+0xa8>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d106      	bne.n	80004b8 <fsm_automatic_run2+0x70>
		{

			status1 = AUTO_RED;
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <fsm_automatic_run2+0xa4>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 80004b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80004b4:	f000 fb2c 	bl	8000b10 <setTimer2>
		}
		setLed2(YELLOW);
 80004b8:	2015      	movs	r0, #21
 80004ba:	f000 f8c7 	bl	800064c <setLed2>
		break;
 80004be:	e012      	b.n	80004e6 <fsm_automatic_run2+0x9e>
	case AUTO_GREEN:
		if(timer2_flag == 1)
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <fsm_automatic_run2+0xa8>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d106      	bne.n	80004d6 <fsm_automatic_run2+0x8e>
		{

			status1 = AUTO_YELLOW;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <fsm_automatic_run2+0xa4>)
 80004ca:	2203      	movs	r2, #3
 80004cc:	601a      	str	r2, [r3, #0]
			setTimer2(2000);
 80004ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d2:	f000 fb1d 	bl	8000b10 <setTimer2>
		}
		setLed2(GREEN);
 80004d6:	2016      	movs	r0, #22
 80004d8:	f000 f8b8 	bl	800064c <setLed2>
		break;
 80004dc:	e003      	b.n	80004e6 <fsm_automatic_run2+0x9e>
	case MANUAL:
		setLed2(OFF);
 80004de:	2017      	movs	r0, #23
 80004e0:	f000 f8b4 	bl	800064c <setLed2>
		break;
 80004e4:	bf00      	nop
	}
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000014 	.word	0x20000014
 80004f0:	20000144 	.word	0x20000144

080004f4 <fsm_manual_run>:
 */

#include "fsm_manual.h"

void fsm_manual_run()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	switch(status){
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <fsm_manual_run+0xb8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b06      	subs	r3, #6
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d851      	bhi.n	80005a6 <fsm_manual_run+0xb2>
 8000502:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <fsm_manual_run+0x14>)
 8000504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000508:	08000519 	.word	0x08000519
 800050c:	0800052d 	.word	0x0800052d
 8000510:	08000565 	.word	0x08000565
 8000514:	0800059d 	.word	0x0800059d
	case MANUAL:
		if(isButtonPressed(2)){
 8000518:	2002      	movs	r0, #2
 800051a:	f7ff fe17 	bl	800014c <isButtonPressed>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d03d      	beq.n	80005a0 <fsm_manual_run+0xac>
			status = MAN_RED;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <fsm_manual_run+0xb8>)
 8000526:	2207      	movs	r2, #7
 8000528:	601a      	str	r2, [r3, #0]
		}
		break;
 800052a:	e039      	b.n	80005a0 <fsm_manual_run+0xac>

	case MAN_RED:
		if(isButtonPressed(2)){
 800052c:	2002      	movs	r0, #2
 800052e:	f7ff fe0d 	bl	800014c <isButtonPressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <fsm_manual_run+0x4a>
			status = MAN_GREEN;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <fsm_manual_run+0xb8>)
 800053a:	2208      	movs	r2, #8
 800053c:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1))
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff fe04 	bl	800014c <isButtonPressed>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <fsm_manual_run+0x62>
		{
			status = INIT;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <fsm_manual_run+0xb8>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
			status1 = INIT;
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <fsm_manual_run+0xbc>)
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
		}
		setLed1(RED);
 8000556:	2014      	movs	r0, #20
 8000558:	f000 f82c 	bl	80005b4 <setLed1>
		setLed2(GREEN);
 800055c:	2016      	movs	r0, #22
 800055e:	f000 f875 	bl	800064c <setLed2>
		break;
 8000562:	e020      	b.n	80005a6 <fsm_manual_run+0xb2>

	case MAN_GREEN:
		setLed2(RED);
 8000564:	2014      	movs	r0, #20
 8000566:	f000 f871 	bl	800064c <setLed2>
		setLed1(GREEN);
 800056a:	2016      	movs	r0, #22
 800056c:	f000 f822 	bl	80005b4 <setLed1>
		if(isButtonPressed(2)){
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff fdeb 	bl	800014c <isButtonPressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <fsm_manual_run+0x8e>
			status = MAN_RED;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <fsm_manual_run+0xb8>)
 800057e:	2207      	movs	r2, #7
 8000580:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1))
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff fde2 	bl	800014c <isButtonPressed>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00a      	beq.n	80005a4 <fsm_manual_run+0xb0>
		{
			status = INIT;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <fsm_manual_run+0xb8>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
			status1 = INIT;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <fsm_manual_run+0xbc>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
		}
		break;
 800059a:	e003      	b.n	80005a4 <fsm_manual_run+0xb0>

	case MAN_YELLOW:
		break;
 800059c:	bf00      	nop
 800059e:	e002      	b.n	80005a6 <fsm_manual_run+0xb2>
		break;
 80005a0:	bf00      	nop
 80005a2:	e000      	b.n	80005a6 <fsm_manual_run+0xb2>
		break;
 80005a4:	bf00      	nop
	}
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000010 	.word	0x20000010
 80005b0:	20000014 	.word	0x20000014

080005b4 <setLed1>:
 *      Author: DELL
 */

#include "led_color.h"

void setLed1(int color){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	switch(color){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3b14      	subs	r3, #20
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d83b      	bhi.n	800063c <setLed1+0x88>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <setLed1+0x18>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	080005f5 	.word	0x080005f5
 80005d8:	08000625 	.word	0x08000625
	case RED:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	4818      	ldr	r0, [pc, #96]	; (8000644 <setLed1+0x90>)
 80005e4:	f000 ff03 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <setLed1+0x94>)
 80005ee:	f000 fefe 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 80005f2:	e023      	b.n	800063c <setLed1+0x88>
	case GREEN:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <setLed1+0x90>)
 80005fc:	f000 fef7 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2108      	movs	r1, #8
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <setLed1+0x94>)
 8000606:	f000 fef2 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 800060a:	e017      	b.n	800063c <setLed1+0x88>
	case YELLOW:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <setLed1+0x90>)
 8000614:	f000 feeb 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2108      	movs	r1, #8
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <setLed1+0x94>)
 800061e:	f000 fee6 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 8000622:	e00b      	b.n	800063c <setLed1+0x88>
	case OFF:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <setLed1+0x90>)
 800062c:	f000 fedf 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2108      	movs	r1, #8
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <setLed1+0x94>)
 8000636:	f000 feda 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 800063a:	bf00      	nop
	}
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40010800 	.word	0x40010800
 8000648:	40010c00 	.word	0x40010c00

0800064c <setLed2>:

void setLed2(int color){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	switch(color){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b14      	subs	r3, #20
 8000658:	2b03      	cmp	r3, #3
 800065a:	d837      	bhi.n	80006cc <setLed2+0x80>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <setLed2+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000675 	.word	0x08000675
 8000668:	080006a1 	.word	0x080006a1
 800066c:	0800068b 	.word	0x0800068b
 8000670:	080006b7 	.word	0x080006b7
	case RED:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2120      	movs	r1, #32
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <setLed2+0x88>)
 800067a:	f000 feb8 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2110      	movs	r1, #16
 8000682:	4814      	ldr	r0, [pc, #80]	; (80006d4 <setLed2+0x88>)
 8000684:	f000 feb3 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 8000688:	e020      	b.n	80006cc <setLed2+0x80>
	case GREEN:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <setLed2+0x88>)
 8000690:	f000 fead 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2110      	movs	r1, #16
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <setLed2+0x88>)
 800069a:	f000 fea8 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 800069e:	e015      	b.n	80006cc <setLed2+0x80>
	case YELLOW:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2120      	movs	r1, #32
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <setLed2+0x88>)
 80006a6:	f000 fea2 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <setLed2+0x88>)
 80006b0:	f000 fe9d 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 80006b4:	e00a      	b.n	80006cc <setLed2+0x80>
	case OFF:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <setLed2+0x88>)
 80006bc:	f000 fe97 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2110      	movs	r1, #16
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <setLed2+0x88>)
 80006c6:	f000 fe92 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 80006ca:	bf00      	nop
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <setLed_Pedes>:

void setLed_Pedes(int color)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	switch(color){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b17      	cmp	r3, #23
 80006e4:	d023      	beq.n	800072e <setLed_Pedes+0x56>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b17      	cmp	r3, #23
 80006ea:	dc2d      	bgt.n	8000748 <setLed_Pedes+0x70>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b14      	cmp	r3, #20
 80006f0:	d003      	beq.n	80006fa <setLed_Pedes+0x22>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b16      	cmp	r3, #22
 80006f6:	d00d      	beq.n	8000714 <setLed_Pedes+0x3c>
	case OFF:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;
	}
}
 80006f8:	e026      	b.n	8000748 <setLed_Pedes+0x70>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <setLed_Pedes+0x78>)
 8000702:	f000 fe74 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070c:	4811      	ldr	r0, [pc, #68]	; (8000754 <setLed_Pedes+0x7c>)
 800070e:	f000 fe6e 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 8000712:	e019      	b.n	8000748 <setLed_Pedes+0x70>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <setLed_Pedes+0x78>)
 800071c:	f000 fe67 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <setLed_Pedes+0x7c>)
 8000728:	f000 fe61 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 800072c:	e00c      	b.n	8000748 <setLed_Pedes+0x70>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <setLed_Pedes+0x78>)
 8000736:	f000 fe5a 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <setLed_Pedes+0x7c>)
 8000742:	f000 fe54 	bl	80013ee <HAL_GPIO_WritePin>
		break;
 8000746:	bf00      	nop
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40010c00 	.word	0x40010c00
 8000754:	40010800 	.word	0x40010800

08000758 <buzzer>:
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100);
//		HAL_Delay(1000);
	}
}
void buzzer()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1)
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <buzzer+0x3c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d10a      	bne.n	800077a <buzzer+0x22>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, timer_counter+30);
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <buzzer+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f103 021e 	add.w	r2, r3, #30
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <buzzer+0x44>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer3(500);
 8000772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000776:	f000 f9df 	bl	8000b38 <setTimer3>
	}
	if(timer1_counter == 0)
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <buzzer+0x48>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d106      	bne.n	8000790 <buzzer+0x38>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <buzzer+0x44>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
		timer_counter = 10;
 800078a:	4b03      	ldr	r3, [pc, #12]	; (8000798 <buzzer+0x40>)
 800078c:	220a      	movs	r2, #10
 800078e:	601a      	str	r2, [r3, #0]
	}
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000148 	.word	0x20000148
 8000798:	20000018 	.word	0x20000018
 800079c:	200000ec 	.word	0x200000ec
 80007a0:	20000134 	.word	0x20000134

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fb16 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f818 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 f91a 	bl	80009e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80007b4:	f000 f8a2 	bl	80008fc <MX_TIM3_Init>
  MX_TIM2_Init();
 80007b8:	f000 f854 	bl	8000864 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <main+0x34>)
 80007be:	f001 fa67 	bl	8001c90 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007c2:	2100      	movs	r1, #0
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <main+0x38>)
 80007c6:	f001 fb0d 	bl	8001de4 <HAL_TIM_PWM_Start>
  while (1)
  {
	  fsm_automatic_run1();
 80007ca:	f7ff fdbd 	bl	8000348 <fsm_automatic_run1>
	  fsm_automatic_run2();
 80007ce:	f7ff fe3b 	bl	8000448 <fsm_automatic_run2>
	  fsm_manual_run();
 80007d2:	f7ff fe8f 	bl	80004f4 <fsm_manual_run>
	  fsm_automatic_run1();
 80007d6:	e7f8      	b.n	80007ca <main+0x26>
 80007d8:	200000a4 	.word	0x200000a4
 80007dc:	200000ec 	.word	0x200000ec

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	; 0x40
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2228      	movs	r2, #40	; 0x28
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 f980 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	2301      	movs	r3, #1
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	2310      	movs	r3, #16
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000812:	2300      	movs	r3, #0
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000816:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fdfd 	bl	8001420 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800082c:	f000 f956 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2102      	movs	r1, #2
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f86a 	bl	8001924 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000856:	f000 f941 	bl	8000adc <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3740      	adds	r7, #64	; 0x40
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_TIM2_Init+0x94>)
 800088a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000898:	2209      	movs	r2, #9
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008aa:	f001 f9a1 	bl	8001bf0 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b4:	f000 f912 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4619      	mov	r1, r3
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008c6:	f001 fcf5 	bl	80022b4 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008d0:	f000 f904 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008e2:	f002 f873 	bl	80029cc <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f8f6 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000a4 	.word	0x200000a4

080008fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	; 0x38
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_TIM3_Init+0xe4>)
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_TIM3_Init+0xe4>)
 8000934:	223f      	movs	r2, #63	; 0x3f
 8000936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_TIM3_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_TIM3_Init+0xe4>)
 8000940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_TIM3_Init+0xe4>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_TIM3_Init+0xe4>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <MX_TIM3_Init+0xe4>)
 8000954:	f001 f94c 	bl	8001bf0 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800095e:	f000 f8bd 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096c:	4619      	mov	r1, r3
 800096e:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_TIM3_Init+0xe4>)
 8000970:	f001 fca0 	bl	80022b4 <HAL_TIM_ConfigClockSource>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800097a:	f000 f8af 	bl	8000adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800097e:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_TIM3_Init+0xe4>)
 8000980:	f001 f9d8 	bl	8001d34 <HAL_TIM_PWM_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800098a:	f000 f8a7 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	4619      	mov	r1, r3
 800099c:	4810      	ldr	r0, [pc, #64]	; (80009e0 <MX_TIM3_Init+0xe4>)
 800099e:	f002 f815 	bl	80029cc <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009a8:	f000 f898 	bl	8000adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ac:	2360      	movs	r3, #96	; 0x60
 80009ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <MX_TIM3_Init+0xe4>)
 80009c4:	f001 fbb8 	bl	8002138 <HAL_TIM_PWM_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009ce:	f000 f885 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM3_Init+0xe4>)
 80009d4:	f000 f970 	bl	8000cb8 <HAL_TIM_MspPostInit>

}
 80009d8:	bf00      	nop
 80009da:	3738      	adds	r7, #56	; 0x38
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000ec 	.word	0x200000ec
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a2d      	ldr	r2, [pc, #180]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a32:	4822      	ldr	r0, [pc, #136]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a34:	f000 fcdb 	bl	80013ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000a3e:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a40:	f000 fcd5 	bl	80013ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B0_Pin B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin;
 8000a44:	2313      	movs	r3, #19
 8000a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a58:	f000 fb2e 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a70:	f000 fb22 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000a74:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2302      	movs	r3, #2
 8000a84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a8e:	f000 fb13 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000a92:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000aac:	f000 fb04 	bl	80010b8 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	timerRun();
 8000acc:	f000 f848 	bl	8000b60 <timerRun>
	getKeyInput();
 8000ad0:	f7ff fb5a 	bl	8000188 <getKeyInput>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <setTimer1>:
int timer2_flag = 0;
int timer3_flag = 0;



void setTimer1(int duration){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000af0:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <setTimer1+0x20>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <setTimer1+0x24>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000134 	.word	0x20000134
 8000b0c:	20000140 	.word	0x20000140

08000b10 <setTimer2>:

void setTimer2(int duration){
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000b18:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <setTimer2+0x20>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <setTimer2+0x24>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000138 	.word	0x20000138
 8000b34:	20000144 	.word	0x20000144

08000b38 <setTimer3>:

void setTimer3(int duration){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <setTimer3+0x20>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <setTimer3+0x24>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000013c 	.word	0x2000013c
 8000b5c:	20000148 	.word	0x20000148

08000b60 <timerRun>:

void timerRun(){
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <timerRun+0x6c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dd0b      	ble.n	8000b84 <timerRun+0x24>
		timer1_counter--;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <timerRun+0x6c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <timerRun+0x6c>)
 8000b74:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <timerRun+0x6c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	dc02      	bgt.n	8000b84 <timerRun+0x24>
			timer1_flag = 1;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <timerRun+0x70>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <timerRun+0x74>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd0b      	ble.n	8000ba4 <timerRun+0x44>
			timer2_counter--;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <timerRun+0x74>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <timerRun+0x74>)
 8000b94:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <timerRun+0x74>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dc02      	bgt.n	8000ba4 <timerRun+0x44>
				timer2_flag = 1;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <timerRun+0x78>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer3_counter > 0){
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <timerRun+0x7c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dd0b      	ble.n	8000bc4 <timerRun+0x64>
				timer3_counter--;
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <timerRun+0x7c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <timerRun+0x7c>)
 8000bb4:	6013      	str	r3, [r2, #0]
				if(timer3_counter <= 0){
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <timerRun+0x7c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	dc02      	bgt.n	8000bc4 <timerRun+0x64>
					timer3_flag = 1;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <timerRun+0x80>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
				}
			}
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000134 	.word	0x20000134
 8000bd0:	20000140 	.word	0x20000140
 8000bd4:	20000138 	.word	0x20000138
 8000bd8:	20000144 	.word	0x20000144
 8000bdc:	2000013c 	.word	0x2000013c
 8000be0:	20000148 	.word	0x20000148

08000be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x60>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_MspInit+0x60>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d114      	bne.n	8000c84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_TIM_Base_MspInit+0x68>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <HAL_TIM_Base_MspInit+0x68>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_TIM_Base_MspInit+0x68>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	201c      	movs	r0, #28
 8000c78:	f000 f9e7 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c7c:	201c      	movs	r0, #28
 8000c7e:	f000 fa00 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c82:	e010      	b.n	8000ca6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_TIM_Base_MspInit+0x6c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10b      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_TIM_Base_MspInit+0x68>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_TIM_Base_MspInit+0x68>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_TIM_Base_MspInit+0x68>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_TIM_MspPostInit+0x58>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d117      	bne.n	8000d08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_TIM_MspPostInit+0x5c>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_TIM_MspPostInit+0x5c>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_TIM_MspPostInit+0x5c>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_TIM_MspPostInit+0x60>)
 8000d04:	f000 f9d8 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40000400 	.word	0x40000400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d62:	f000 f87f 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <TIM2_IRQHandler+0x10>)
 8000d72:	f001 f8d9 	bl	8001f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000a4 	.word	0x200000a4

08000d80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db2:	f7ff ffe5 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f001 fe79 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dba:	f7ff fcf3 	bl	80007a4 <main>
  bx lr
 8000dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000dc8:	08002b44 	.word	0x08002b44
  ldr r2, =_sbss
 8000dcc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000dd0:	20000150 	.word	0x20000150

08000dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_2_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x28>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x28>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f923 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fef6 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f93b 	bl	800109e <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f903 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000001c 	.word	0x2000001c
 8000e5c:	20000024 	.word	0x20000024
 8000e60:	20000020 	.word	0x20000020

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_IncTick+0x20>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	20000024 	.word	0x20000024
 8000e84:	2000014c 	.word	0x2000014c

08000e88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	2000014c 	.word	0x2000014c

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <__NVIC_EnableIRQ+0x34>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff90 	bl	8000f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff2d 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff42 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff90 	bl	8000f8c <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5f 	bl	8000f38 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff35 	bl	8000f00 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	e169      	b.n	80013a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010cc:	2201      	movs	r2, #1
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8158 	bne.w	800139a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a9a      	ldr	r2, [pc, #616]	; (8001358 <HAL_GPIO_Init+0x2a0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d05e      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 80010f4:	4a98      	ldr	r2, [pc, #608]	; (8001358 <HAL_GPIO_Init+0x2a0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d875      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 80010fa:	4a98      	ldr	r2, [pc, #608]	; (800135c <HAL_GPIO_Init+0x2a4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d058      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001100:	4a96      	ldr	r2, [pc, #600]	; (800135c <HAL_GPIO_Init+0x2a4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d86f      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001106:	4a96      	ldr	r2, [pc, #600]	; (8001360 <HAL_GPIO_Init+0x2a8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d052      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 800110c:	4a94      	ldr	r2, [pc, #592]	; (8001360 <HAL_GPIO_Init+0x2a8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d869      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001112:	4a94      	ldr	r2, [pc, #592]	; (8001364 <HAL_GPIO_Init+0x2ac>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d04c      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001118:	4a92      	ldr	r2, [pc, #584]	; (8001364 <HAL_GPIO_Init+0x2ac>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d863      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 800111e:	4a92      	ldr	r2, [pc, #584]	; (8001368 <HAL_GPIO_Init+0x2b0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d046      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001124:	4a90      	ldr	r2, [pc, #576]	; (8001368 <HAL_GPIO_Init+0x2b0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d85d      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 800112a:	2b12      	cmp	r3, #18
 800112c:	d82a      	bhi.n	8001184 <HAL_GPIO_Init+0xcc>
 800112e:	2b12      	cmp	r3, #18
 8001130:	d859      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <HAL_GPIO_Init+0x80>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	080011b3 	.word	0x080011b3
 800113c:	0800118d 	.word	0x0800118d
 8001140:	0800119f 	.word	0x0800119f
 8001144:	080011e1 	.word	0x080011e1
 8001148:	080011e7 	.word	0x080011e7
 800114c:	080011e7 	.word	0x080011e7
 8001150:	080011e7 	.word	0x080011e7
 8001154:	080011e7 	.word	0x080011e7
 8001158:	080011e7 	.word	0x080011e7
 800115c:	080011e7 	.word	0x080011e7
 8001160:	080011e7 	.word	0x080011e7
 8001164:	080011e7 	.word	0x080011e7
 8001168:	080011e7 	.word	0x080011e7
 800116c:	080011e7 	.word	0x080011e7
 8001170:	080011e7 	.word	0x080011e7
 8001174:	080011e7 	.word	0x080011e7
 8001178:	080011e7 	.word	0x080011e7
 800117c:	08001195 	.word	0x08001195
 8001180:	080011a9 	.word	0x080011a9
 8001184:	4a79      	ldr	r2, [pc, #484]	; (800136c <HAL_GPIO_Init+0x2b4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118a:	e02c      	b.n	80011e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e029      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	3304      	adds	r3, #4
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e024      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	3308      	adds	r3, #8
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e01f      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	330c      	adds	r3, #12
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e01a      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ba:	2304      	movs	r3, #4
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e013      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	611a      	str	r2, [r3, #16]
          break;
 80011d2:	e009      	b.n	80011e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d4:	2308      	movs	r3, #8
 80011d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	615a      	str	r2, [r3, #20]
          break;
 80011de:	e003      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          break;
 80011e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2bff      	cmp	r3, #255	; 0xff
 80011ec:	d801      	bhi.n	80011f2 <HAL_GPIO_Init+0x13a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e001      	b.n	80011f6 <HAL_GPIO_Init+0x13e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3304      	adds	r3, #4
 80011f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2bff      	cmp	r3, #255	; 0xff
 80011fc:	d802      	bhi.n	8001204 <HAL_GPIO_Init+0x14c>
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	e002      	b.n	800120a <HAL_GPIO_Init+0x152>
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	3b08      	subs	r3, #8
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	210f      	movs	r1, #15
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	401a      	ands	r2, r3
 800121c:	6a39      	ldr	r1, [r7, #32]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	431a      	orrs	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80b1 	beq.w	800139a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001238:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001250:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_GPIO_Init+0x2bc>)
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a40      	ldr	r2, [pc, #256]	; (8001378 <HAL_GPIO_Init+0x2c0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d013      	beq.n	80012a4 <HAL_GPIO_Init+0x1ec>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a3f      	ldr	r2, [pc, #252]	; (800137c <HAL_GPIO_Init+0x2c4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d00d      	beq.n	80012a0 <HAL_GPIO_Init+0x1e8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a3e      	ldr	r2, [pc, #248]	; (8001380 <HAL_GPIO_Init+0x2c8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x1e4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <HAL_GPIO_Init+0x2cc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_GPIO_Init+0x1e0>
 8001294:	2303      	movs	r3, #3
 8001296:	e006      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 8001298:	2304      	movs	r3, #4
 800129a:	e004      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 800129c:	2302      	movs	r3, #2
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a4:	2300      	movs	r3, #0
 80012a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	4093      	lsls	r3, r2
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b6:	492f      	ldr	r1, [pc, #188]	; (8001374 <HAL_GPIO_Init+0x2bc>)
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	492c      	ldr	r1, [pc, #176]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	4928      	ldr	r1, [pc, #160]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4922      	ldr	r1, [pc, #136]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	491e      	ldr	r1, [pc, #120]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001310:	4013      	ands	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	4918      	ldr	r1, [pc, #96]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	43db      	mvns	r3, r3
 8001336:	4914      	ldr	r1, [pc, #80]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001338:	4013      	ands	r3, r2
 800133a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d021      	beq.n	800138c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	490e      	ldr	r1, [pc, #56]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
 8001354:	e021      	b.n	800139a <HAL_GPIO_Init+0x2e2>
 8001356:	bf00      	nop
 8001358:	10320000 	.word	0x10320000
 800135c:	10310000 	.word	0x10310000
 8001360:	10220000 	.word	0x10220000
 8001364:	10210000 	.word	0x10210000
 8001368:	10120000 	.word	0x10120000
 800136c:	10110000 	.word	0x10110000
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	40010800 	.word	0x40010800
 800137c:	40010c00 	.word	0x40010c00
 8001380:	40011000 	.word	0x40011000
 8001384:	40011400 	.word	0x40011400
 8001388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_GPIO_Init+0x304>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	43db      	mvns	r3, r3
 8001394:	4909      	ldr	r1, [pc, #36]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001396:	4013      	ands	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f47f ae8e 	bne.w	80010cc <HAL_GPIO_Init+0x14>
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	372c      	adds	r7, #44	; 0x2c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40010400 	.word	0x40010400

080013c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]
 80013fa:	4613      	mov	r3, r2
 80013fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013fe:	787b      	ldrb	r3, [r7, #1]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800140a:	e003      	b.n	8001414 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	041a      	lsls	r2, r3, #16
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	611a      	str	r2, [r3, #16]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
	...

08001420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e272      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8087 	beq.w	800154e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001440:	4b92      	ldr	r3, [pc, #584]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b04      	cmp	r3, #4
 800144a:	d00c      	beq.n	8001466 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800144c:	4b8f      	ldr	r3, [pc, #572]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b08      	cmp	r3, #8
 8001456:	d112      	bne.n	800147e <HAL_RCC_OscConfig+0x5e>
 8001458:	4b8c      	ldr	r3, [pc, #560]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001464:	d10b      	bne.n	800147e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001466:	4b89      	ldr	r3, [pc, #548]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d06c      	beq.n	800154c <HAL_RCC_OscConfig+0x12c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d168      	bne.n	800154c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e24c      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001486:	d106      	bne.n	8001496 <HAL_RCC_OscConfig+0x76>
 8001488:	4b80      	ldr	r3, [pc, #512]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a7f      	ldr	r2, [pc, #508]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e02e      	b.n	80014f4 <HAL_RCC_OscConfig+0xd4>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x98>
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a7a      	ldr	r2, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a77      	ldr	r2, [pc, #476]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e01d      	b.n	80014f4 <HAL_RCC_OscConfig+0xd4>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0xbc>
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a71      	ldr	r2, [pc, #452]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6e      	ldr	r2, [pc, #440]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0xd4>
 80014dc:	4b6b      	ldr	r3, [pc, #428]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a6a      	ldr	r2, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b68      	ldr	r3, [pc, #416]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a67      	ldr	r2, [pc, #412]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcc4 	bl	8000e88 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fcc0 	bl	8000e88 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e200      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0xe4>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fcb0 	bl	8000e88 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fcac 	bl	8000e88 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1ec      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x10c>
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d063      	beq.n	8001622 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b08      	cmp	r3, #8
 8001570:	d11c      	bne.n	80015ac <HAL_RCC_OscConfig+0x18c>
 8001572:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d116      	bne.n	80015ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x176>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e1c0      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4939      	ldr	r1, [pc, #228]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	e03a      	b.n	8001622 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc65 	bl	8000e88 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc61 	bl	8000e88 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1a1      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4927      	ldr	r1, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc44 	bl	8000e88 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fc40 	bl	8000e88 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e180      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d03a      	beq.n	80016a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d019      	beq.n	800166a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_RCC_OscConfig+0x274>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163c:	f7ff fc24 	bl	8000e88 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fc20 	bl	8000e88 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e160      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_RCC_OscConfig+0x26c>)
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f000 faa6 	bl	8001bb4 <RCC_Delay>
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RCC_OscConfig+0x274>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fc0a 	bl	8000e88 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001676:	e00f      	b.n	8001698 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fc06 	bl	8000e88 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d908      	bls.n	8001698 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e146      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	42420000 	.word	0x42420000
 8001694:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	4b92      	ldr	r3, [pc, #584]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1e9      	bne.n	8001678 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a6 	beq.w	80017fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b6:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10d      	bne.n	80016de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016da:	2301      	movs	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	4b82      	ldr	r3, [pc, #520]	; (80018e8 <HAL_RCC_OscConfig+0x4c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <HAL_RCC_OscConfig+0x4c8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a7e      	ldr	r2, [pc, #504]	; (80018e8 <HAL_RCC_OscConfig+0x4c8>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fbc7 	bl	8000e88 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fe:	f7ff fbc3 	bl	8000e88 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b64      	cmp	r3, #100	; 0x64
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e103      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <HAL_RCC_OscConfig+0x4c8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x312>
 8001724:	4b6f      	ldr	r3, [pc, #444]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a6e      	ldr	r2, [pc, #440]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	e02d      	b.n	800178e <HAL_RCC_OscConfig+0x36e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x334>
 800173a:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a69      	ldr	r2, [pc, #420]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a66      	ldr	r2, [pc, #408]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	e01c      	b.n	800178e <HAL_RCC_OscConfig+0x36e>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d10c      	bne.n	8001776 <HAL_RCC_OscConfig+0x356>
 800175c:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a60      	ldr	r2, [pc, #384]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a5d      	ldr	r2, [pc, #372]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0x36e>
 8001776:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a5a      	ldr	r2, [pc, #360]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d015      	beq.n	80017c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb77 	bl	8000e88 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fb73 	bl	8000e88 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0b1      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ee      	beq.n	800179e <HAL_RCC_OscConfig+0x37e>
 80017c0:	e014      	b.n	80017ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fb61 	bl	8000e88 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fb5d 	bl	8000e88 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e09b      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	4b40      	ldr	r3, [pc, #256]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ee      	bne.n	80017ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d105      	bne.n	80017fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a3b      	ldr	r2, [pc, #236]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8087 	beq.w	8001916 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d061      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d146      	bne.n	80018aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fb31 	bl	8000e88 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fb2d 	bl	8000e88 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e06d      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d108      	bne.n	8001864 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4921      	ldr	r1, [pc, #132]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a19      	ldr	r1, [r3, #32]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	430b      	orrs	r3, r1
 8001876:	491b      	ldr	r1, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb01 	bl	8000e88 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fafd 	bl	8000e88 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e03d      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x46a>
 80018a8:	e035      	b.n	8001916 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_RCC_OscConfig+0x4cc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff faea 	bl	8000e88 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fae6 	bl	8000e88 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e026      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x498>
 80018d6:	e01e      	b.n	8001916 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e019      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40007000 	.word	0x40007000
 80018ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x500>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	429a      	cmp	r2, r3
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0d0      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d910      	bls.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 0207 	bic.w	r2, r3, #7
 800194e:	4965      	ldr	r1, [pc, #404]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0b8      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800198a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	494d      	ldr	r1, [pc, #308]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d040      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e07f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e073      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e06b      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4936      	ldr	r1, [pc, #216]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff fa38 	bl	8000e88 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff fa34 	bl	8000e88 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e053      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d210      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e032      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab2:	f000 f821 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	490a      	ldr	r1, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	5ccb      	ldrb	r3, [r1, r3]
 8001ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1cc>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f996 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08002b2c 	.word	0x08002b2c
 8001af0:	2000001c 	.word	0x2000001c
 8001af4:	20000020 	.word	0x20000020

08001af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b490      	push	{r4, r7}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b00:	1d3c      	adds	r4, r7, #4
 8001b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b08:	f240 2301 	movw	r3, #513	; 0x201
 8001b0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x40>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x46>
 8001b36:	e02b      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b3a:	623b      	str	r3, [r7, #32]
      break;
 8001b3c:	e02b      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3328      	adds	r3, #40	; 0x28
 8001b48:	443b      	add	r3, r7
 8001b4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d012      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0c5b      	lsrs	r3, r3, #17
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	3328      	adds	r3, #40	; 0x28
 8001b66:	443b      	add	r3, r7
 8001b68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b72:	fb03 f202 	mul.w	r2, r3, r2
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	e004      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	623b      	str	r3, [r7, #32]
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b92:	623b      	str	r3, [r7, #32]
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	6a3b      	ldr	r3, [r7, #32]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc90      	pop	{r4, r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	08002b1c 	.word	0x08002b1c
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	003d0900 	.word	0x003d0900

08001bb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <RCC_Delay+0x34>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <RCC_Delay+0x38>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0a5b      	lsrs	r3, r3, #9
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bd0:	bf00      	nop
  }
  while (Delay --);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1e5a      	subs	r2, r3, #1
 8001bd6:	60fa      	str	r2, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f9      	bne.n	8001bd0 <RCC_Delay+0x1c>
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	2000001c 	.word	0x2000001c
 8001bec:	10624dd3 	.word	0x10624dd3

08001bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e041      	b.n	8001c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff f816 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f000 fc28 	bl	8002484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d001      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e03a      	b.n	8001d1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_TIM_Base_Start_IT+0x98>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x58>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd2:	d009      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x58>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_TIM_Base_Start_IT+0x9c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_TIM_Base_Start_IT+0x58>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d010      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0a:	e007      	b.n	8001d1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40000800 	.word	0x40000800

08001d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e041      	b.n	8001dca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f839 	bl	8001dd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f000 fb86 	bl	8002484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_TIM_PWM_Start+0x24>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e022      	b.n	8001e4e <HAL_TIM_PWM_Start+0x6a>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d109      	bne.n	8001e22 <HAL_TIM_PWM_Start+0x3e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	e015      	b.n	8001e4e <HAL_TIM_PWM_Start+0x6a>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d109      	bne.n	8001e3c <HAL_TIM_PWM_Start+0x58>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e008      	b.n	8001e4e <HAL_TIM_PWM_Start+0x6a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e05e      	b.n	8001f14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <HAL_TIM_PWM_Start+0x82>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e64:	e013      	b.n	8001e8e <HAL_TIM_PWM_Start+0xaa>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d104      	bne.n	8001e76 <HAL_TIM_PWM_Start+0x92>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e74:	e00b      	b.n	8001e8e <HAL_TIM_PWM_Start+0xaa>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d104      	bne.n	8001e86 <HAL_TIM_PWM_Start+0xa2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e84:	e003      	b.n	8001e8e <HAL_TIM_PWM_Start+0xaa>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	6839      	ldr	r1, [r7, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fd74 	bl	8002984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_TIM_PWM_Start+0x138>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d107      	bne.n	8001eb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_TIM_PWM_Start+0x138>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00e      	beq.n	8001ede <HAL_TIM_PWM_Start+0xfa>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d009      	beq.n	8001ede <HAL_TIM_PWM_Start+0xfa>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_TIM_PWM_Start+0x13c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_TIM_PWM_Start+0xfa>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <HAL_TIM_PWM_Start+0x140>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d111      	bne.n	8001f02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d010      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f00:	e007      	b.n	8001f12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800

08001f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0202 	mvn.w	r2, #2
 8001f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fa6f 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fa62 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fa71 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0204 	mvn.w	r2, #4
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fa45 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fa38 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fa47 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0208 	mvn.w	r2, #8
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2204      	movs	r2, #4
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fa1b 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fa0e 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fa1d 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b10      	cmp	r3, #16
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0210 	mvn.w	r2, #16
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2208      	movs	r2, #8
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f9f1 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f9e4 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f9f3 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0201 	mvn.w	r2, #1
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fd0c 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c4:	2b80      	cmp	r3, #128	; 0x80
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fce1 	bl	8002a9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f9b7 	bl	8002472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b20      	cmp	r3, #32
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b20      	cmp	r3, #32
 800211e:	d107      	bne.n	8002130 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0220 	mvn.w	r2, #32
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fcac 	bl	8002a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800214e:	2302      	movs	r3, #2
 8002150:	e0ac      	b.n	80022ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	f200 809f 	bhi.w	80022a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	0800219d 	.word	0x0800219d
 800216c:	080022a1 	.word	0x080022a1
 8002170:	080022a1 	.word	0x080022a1
 8002174:	080022a1 	.word	0x080022a1
 8002178:	080021dd 	.word	0x080021dd
 800217c:	080022a1 	.word	0x080022a1
 8002180:	080022a1 	.word	0x080022a1
 8002184:	080022a1 	.word	0x080022a1
 8002188:	0800221f 	.word	0x0800221f
 800218c:	080022a1 	.word	0x080022a1
 8002190:	080022a1 	.word	0x080022a1
 8002194:	080022a1 	.word	0x080022a1
 8002198:	0800225f 	.word	0x0800225f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f9d0 	bl	8002548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0204 	bic.w	r2, r2, #4
 80021c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6999      	ldr	r1, [r3, #24]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	619a      	str	r2, [r3, #24]
      break;
 80021da:	e062      	b.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fa16 	bl	8002614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6999      	ldr	r1, [r3, #24]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	021a      	lsls	r2, r3, #8
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	619a      	str	r2, [r3, #24]
      break;
 800221c:	e041      	b.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fa5f 	bl	80026e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0208 	orr.w	r2, r2, #8
 8002238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0204 	bic.w	r2, r2, #4
 8002248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
      break;
 800225c:	e021      	b.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 faa9 	bl	80027bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69d9      	ldr	r1, [r3, #28]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	021a      	lsls	r2, r3, #8
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	61da      	str	r2, [r3, #28]
      break;
 800229e:	e000      	b.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80022a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_TIM_ConfigClockSource+0x18>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0b3      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x180>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002304:	d03e      	beq.n	8002384 <HAL_TIM_ConfigClockSource+0xd0>
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230a:	f200 8087 	bhi.w	800241c <HAL_TIM_ConfigClockSource+0x168>
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	f000 8085 	beq.w	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	d87f      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800231c:	2b70      	cmp	r3, #112	; 0x70
 800231e:	d01a      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0xa2>
 8002320:	2b70      	cmp	r3, #112	; 0x70
 8002322:	d87b      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 8002324:	2b60      	cmp	r3, #96	; 0x60
 8002326:	d050      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x116>
 8002328:	2b60      	cmp	r3, #96	; 0x60
 800232a:	d877      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800232c:	2b50      	cmp	r3, #80	; 0x50
 800232e:	d03c      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0xf6>
 8002330:	2b50      	cmp	r3, #80	; 0x50
 8002332:	d873      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d058      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x136>
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d86f      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800233c:	2b30      	cmp	r3, #48	; 0x30
 800233e:	d064      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
 8002340:	2b30      	cmp	r3, #48	; 0x30
 8002342:	d86b      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 8002344:	2b20      	cmp	r3, #32
 8002346:	d060      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
 8002348:	2b20      	cmp	r3, #32
 800234a:	d867      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d05c      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
 8002350:	2b10      	cmp	r3, #16
 8002352:	d05a      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002354:	e062      	b.n	800241c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f000 faee 	bl	8002946 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002378:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	609a      	str	r2, [r3, #8]
      break;
 8002382:	e04e      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f000 fad7 	bl	8002946 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a6:	609a      	str	r2, [r3, #8]
      break;
 80023a8:	e03b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f000 fa4e 	bl	8002858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2150      	movs	r1, #80	; 0x50
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 faa5 	bl	8002912 <TIM_ITRx_SetConfig>
      break;
 80023c8:	e02b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f000 fa6c 	bl	80028b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2160      	movs	r1, #96	; 0x60
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fa95 	bl	8002912 <TIM_ITRx_SetConfig>
      break;
 80023e8:	e01b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f000 fa2e 	bl	8002858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2140      	movs	r1, #64	; 0x40
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fa85 	bl	8002912 <TIM_ITRx_SetConfig>
      break;
 8002408:	e00b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f000 fa7c 	bl	8002912 <TIM_ITRx_SetConfig>
        break;
 800241a:	e002      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800241c:	bf00      	nop
 800241e:	e000      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002420:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a29      	ldr	r2, [pc, #164]	; (800253c <TIM_Base_SetConfig+0xb8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00b      	beq.n	80024b4 <TIM_Base_SetConfig+0x30>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d007      	beq.n	80024b4 <TIM_Base_SetConfig+0x30>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a26      	ldr	r2, [pc, #152]	; (8002540 <TIM_Base_SetConfig+0xbc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <TIM_Base_SetConfig+0x30>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a25      	ldr	r2, [pc, #148]	; (8002544 <TIM_Base_SetConfig+0xc0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d108      	bne.n	80024c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <TIM_Base_SetConfig+0xb8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00b      	beq.n	80024e6 <TIM_Base_SetConfig+0x62>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d007      	beq.n	80024e6 <TIM_Base_SetConfig+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <TIM_Base_SetConfig+0xbc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d003      	beq.n	80024e6 <TIM_Base_SetConfig+0x62>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a18      	ldr	r2, [pc, #96]	; (8002544 <TIM_Base_SetConfig+0xc0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d108      	bne.n	80024f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <TIM_Base_SetConfig+0xb8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d103      	bne.n	800252c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	615a      	str	r2, [r3, #20]
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40000400 	.word	0x40000400
 8002544:	40000800 	.word	0x40000800

08002548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f023 0201 	bic.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f023 0302 	bic.w	r3, r3, #2
 8002590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <TIM_OC1_SetConfig+0xc8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d10c      	bne.n	80025be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f023 0308 	bic.w	r3, r3, #8
 80025aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a13      	ldr	r2, [pc, #76]	; (8002610 <TIM_OC1_SetConfig+0xc8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d111      	bne.n	80025ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	621a      	str	r2, [r3, #32]
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40012c00 	.word	0x40012c00

08002614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 0210 	bic.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0320 	bic.w	r3, r3, #32
 800265e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <TIM_OC2_SetConfig+0xd0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10d      	bne.n	8002690 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800267a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800268e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <TIM_OC2_SetConfig+0xd0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d113      	bne.n	80026c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800269e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	40012c00 	.word	0x40012c00

080026e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <TIM_OC3_SetConfig+0xd0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10d      	bne.n	8002762 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800274c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <TIM_OC3_SetConfig+0xd0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d113      	bne.n	8002792 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	621a      	str	r2, [r3, #32]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40012c00 	.word	0x40012c00

080027bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	031b      	lsls	r3, r3, #12
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <TIM_OC4_SetConfig+0x98>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d109      	bne.n	8002830 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	019b      	lsls	r3, r3, #6
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40012c00 	.word	0x40012c00

08002858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0201 	bic.w	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 030a 	bic.w	r3, r3, #10
 8002894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f023 0210 	bic.w	r2, r3, #16
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	031b      	lsls	r3, r3, #12
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	621a      	str	r2, [r3, #32]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	f043 0307 	orr.w	r3, r3, #7
 8002934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	609a      	str	r2, [r3, #8]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002946:	b480      	push	{r7}
 8002948:	b087      	sub	sp, #28
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002960:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	431a      	orrs	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4313      	orrs	r3, r2
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	609a      	str	r2, [r3, #8]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2201      	movs	r2, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e046      	b.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d009      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10c      	bne.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800

08002a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	2600      	movs	r6, #0
 8002ab0:	4d0c      	ldr	r5, [pc, #48]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab2:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab4:	1b64      	subs	r4, r4, r5
 8002ab6:	10a4      	asrs	r4, r4, #2
 8002ab8:	42a6      	cmp	r6, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	f000 f822 	bl	8002b04 <_init>
 8002ac0:	2600      	movs	r6, #0
 8002ac2:	4d0a      	ldr	r5, [pc, #40]	; (8002aec <__libc_init_array+0x40>)
 8002ac4:	4c0a      	ldr	r4, [pc, #40]	; (8002af0 <__libc_init_array+0x44>)
 8002ac6:	1b64      	subs	r4, r4, r5
 8002ac8:	10a4      	asrs	r4, r4, #2
 8002aca:	42a6      	cmp	r6, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad4:	4798      	blx	r3
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ade:	4798      	blx	r3
 8002ae0:	3601      	adds	r6, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002b3c 	.word	0x08002b3c
 8002ae8:	08002b3c 	.word	0x08002b3c
 8002aec:	08002b3c 	.word	0x08002b3c
 8002af0:	08002b40 	.word	0x08002b40

08002af4 <memset>:
 8002af4:	4603      	mov	r3, r0
 8002af6:	4402      	add	r2, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
